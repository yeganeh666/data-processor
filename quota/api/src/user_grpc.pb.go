// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: quota/api/user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserQuotaServiceClient is the client API for UserQuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQuotaServiceClient interface {
	CheckQuota(ctx context.Context, in *CheckQuotaReq, opts ...grpc.CallOption) (*Void, error)
}

type userQuotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQuotaServiceClient(cc grpc.ClientConnInterface) UserQuotaServiceClient {
	return &userQuotaServiceClient{cc}
}

func (c *userQuotaServiceClient) CheckQuota(ctx context.Context, in *CheckQuotaReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/quota_api.UserQuotaService/CheckQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQuotaServiceServer is the server API for UserQuotaService service.
// All implementations should embed UnimplementedUserQuotaServiceServer
// for forward compatibility
type UserQuotaServiceServer interface {
	CheckQuota(context.Context, *CheckQuotaReq) (*Void, error)
}

// UnimplementedUserQuotaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserQuotaServiceServer struct {
}

func (UnimplementedUserQuotaServiceServer) CheckQuota(context.Context, *CheckQuotaReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuota not implemented")
}

// UnsafeUserQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQuotaServiceServer will
// result in compilation errors.
type UnsafeUserQuotaServiceServer interface {
	mustEmbedUnimplementedUserQuotaServiceServer()
}

func RegisterUserQuotaServiceServer(s grpc.ServiceRegistrar, srv UserQuotaServiceServer) {
	s.RegisterService(&UserQuotaService_ServiceDesc, srv)
}

func _UserQuotaService_CheckQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuotaServiceServer).CheckQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_api.UserQuotaService/CheckQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuotaServiceServer).CheckQuota(ctx, req.(*CheckQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQuotaService_ServiceDesc is the grpc.ServiceDesc for UserQuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quota_api.UserQuotaService",
	HandlerType: (*UserQuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckQuota",
			Handler:    _UserQuotaService_CheckQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quota/api/user.proto",
}
